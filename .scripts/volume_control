#!/usr/bin/env bash
set -x
function help() {
	echo "Usage: $0 +inc_num% | -dec_num% | abs_num%"
}

function is_absolute_volume() {
	cmd=$1
	echo "$cmd" | grep -E '^ *[0-9]+%' | grep -Eo '[0-9]+'
}

function get_absolute_value() {
	val=$1
	echo "$val" | grep -Eo '[0-9]+'
}

function is_relative_volume() {
	cmd=$1
	echo "$cmd" | grep -E '^ *(\-|\+)[0-9]+%'
}

function get_relative_value() {
	val=$1
	# Because bc cannot handle e.g. 1+(+1), only the negative sign is extracted.
	echo "$val" | grep -Eo '\-*[0-9]+'
}

function get_volume() {
	sink=$1
	pactl list sinks | grep '^[[:space:]]Volume:' | head -n $((sink + 1)) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,'
}

function get_default_sink() {
	pactl info | sed -En 's/Default Sink: (.*)/\1/p'
}

function get_sink_id() {
	name=$1
	pactl list sinks | grep "^[[:space:]]Name: $name" -B2 | head -n 1 | sed -e 's/Sink \#//g'
}

# Parse arguments
cmd=${1}
if [ -z "$cmd" ]; then
	help
	exit 1
fi
max_volume=${2:-120}

# Calculate the target volume
default_sink_id=$(get_sink_id "$(get_default_sink)")
current_volume=$(get_volume "${default_sink_id}")
target_volume=${current_volume}
if [[ $(is_absolute_volume "$cmd") ]]; then
	target_volume=$(get_absolute_value "$cmd")
elif [[ $(is_relative_volume "$cmd") ]]; then
	relative_volume=$(get_relative_value "$cmd")
	target_volume=$(echo "$current_volume + $relative_volume" | bc -l)
else
	help
	exit
fi

if [[ ${target_volume} -gt ${max_volume} ]]; then
	target_volume=${max_volume}
fi

pactl set-sink-volume "${default_sink_id}" "${target_volume}%"
